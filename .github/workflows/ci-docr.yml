name: Build and push to DigitalOcean Container Registry (DOCR)

on:
  push:
    branches: [ master ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      DOCR_REGISTRY: ${{ secrets.DOCR_REGISTRY }}
      DOCR_REPOSITORY: ${{ secrets.DOCR_REPOSITORY }}
      DO_FULL_IMAGE: ${{ secrets.DO_FULL_IMAGE }}
      DO_APP_ID: ${{ secrets.DO_APP_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          echo "=== Disk space before cleanup ==="
          df -h
          echo "=== Cleaning up ==="
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo docker system prune -af --volumes
          echo "=== Disk space after cleanup ==="
          df -h

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install doctl and authenticate
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Login to DOCR
        run: doctl registry login

      - name: Validate DOCR registry/repository secrets
        run: |
          if [ -z "$DOCR_REGISTRY" ] || [ -z "$DOCR_REPOSITORY" ]; then
            echo "ERROR: DOCR_REGISTRY and DOCR_REPOSITORY must be set in repository secrets."
            echo "Set them in Settings -> Secrets -> Actions and re-run the workflow."
            exit 1
          fi

      - name: Build minimal image (base requirements) and capture logs
        run: |
          set -o pipefail
          REG=registry.digitalocean.com/$DOCR_REGISTRY
          REPO=$DOCR_REPOSITORY
          SHA_TAG=${{ github.sha }}
          IMAGE_MIN="$REG/$REPO:$SHA_TAG"
          echo "Building minimal image: $IMAGE_MIN"
          docker buildx build --pull \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
            -t "$IMAGE_MIN" \
            -t "$REG/$REPO:latest" \
            --build-arg REQUIREMENTS=config/requirements.txt \
            --push \
            . 2>&1 | tee build-minimal.log

      - name: Upload minimal build logs
        uses: actions/upload-artifact@v4
        with:
          name: build-minimal-logs
          path: build-minimal.log

      - name: Free space before full build
        if: true  # Temporarily enabled
        run: |
          echo "=== Removing minimal image to free space ==="
          docker image rm registry.digitalocean.com/${{ secrets.DOCR_REGISTRY }}/${{ secrets.DOCR_REPOSITORY }}:${{ github.sha }}-min || true
          docker image rm registry.digitalocean.com/${{ secrets.DOCR_REGISTRY }}/${{ secrets.DOCR_REPOSITORY }}:min-latest || true
          docker system prune -f
          echo "=== Disk space after cleanup ==="
          df -h

      - name: (Optional) Build full image (heavy deps) and capture logs
        if: true  # Temporarily enabled to build updated full image with file fix
        run: |
          set -o pipefail
          REG=registry.digitalocean.com/$DOCR_REGISTRY
          REPO=$DOCR_REPOSITORY
          SHA_TAG=${{ github.sha }}
          IMAGE_FULL="$REG/$REPO:${SHA_TAG}-full"
          echo "Building full image: $IMAGE_FULL"
          # Create a merged requirements file (minimal + optional) so the full image contains both sets
          cat config/requirements.txt config/requirements-optional.txt > config/requirements-full.txt
          # Build using the combined requirements to ensure FastAPI/uvicorn + torch (and friends) are installed
          docker buildx build --pull \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
            -t "$IMAGE_FULL" \
            -t "$REG/$REPO:full-latest" \
            --build-arg REQUIREMENTS=config/requirements-full.txt \
            --push \
            . 2>&1 | tee build-full.log

      - name: Upload full build logs
        if: true  # Temporarily enabled
        uses: actions/upload-artifact@v4
        with:
          name: build-full-logs
          path: build-full.log

      - name: Output image locations
        run: echo "Images pushed to registry.digitalocean.com/$DOCR_REGISTRY/$DOCR_REPOSITORY"

      - name: Move new Docker cache
        run: |
          rm -rf /tmp/.buildx-cache
          if [ -d /tmp/.buildx-cache-new ]; then
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          fi

      - name: Fetch DigitalOcean App Platform logs (optional)
        if: env.DO_APP_ID != ''
        run: |
          # fetch recent deploy logs for the 'api' component (adjust component name if different)
          echo "Fetching App Platform logs for app $DO_APP_ID"
          doctl apps logs $DO_APP_ID --component api --type deploy --lines 200 > app-deploy.log || true

      - name: Upload App Platform logs (if any)
        if: env.DO_APP_ID != ''
        uses: actions/upload-artifact@v4
        with:
          name: app-deploy-logs
          path: app-deploy.log

      - name: Show do_app_spec.yaml (debug)
        if: env.DO_APP_ID != ''
        run: |
          echo "---- BEGIN do_app_spec.yaml (runtime) ----"
          if [ -f ./do_app_spec.yaml ]; then
            cat ./do_app_spec.yaml
          else
            echo "do_app_spec.yaml not found at workspace root"
          fi
          echo "---- END do_app_spec.yaml ----"

      - name: Upload do_app_spec (debug)
        if: env.DO_APP_ID != ''
        uses: actions/upload-artifact@v4
        with:
          name: do_app_spec
          path: do_app_spec.yaml

      - name: Update DigitalOcean App (disabled)
        if: ${{ false }}
        run: |
          echo "Automatic app update disabled in CI. To enable, ensure do_app_spec.yaml matches doctl schema and set the condition back to use DO_APP_ID."
